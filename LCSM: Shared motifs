# -*- coding: utf-8 -*-
"""
Given: A collection of k (kâ‰¤100) DNA strings of length at most 1 kbp each in FASTA format.
Return: A longest common substring of the collection. (If multiple solutions exist, you may return any single solution.)
"""


#append ids and multi-line sequences to their respective lists
ids = []
sequences=[]
with open('rosalind_lcsm.txt') as file_object:
    sequence = ''
    for line in file_object:
        if ('>') not in line:
            sequence +=	line.rstrip('\n')
            continue
        else:
            ids.append(line.rstrip('\n').lstrip('>'))
            if sequence:
                sequences.append(sequence)
                sequence = ""
    sequences.append(sequence)

#find the shortest string in the list of sequences
shortest = min(sequences, key=len)

substrings = []
def all_substrings(string):
    """finds all the substrings, appends to list"""

    last_index = len(string)
    for i in range(0,last_index):
        for j in range((i+1),(last_index+1)):
            substring=shortest[i:j]
            substrings.append(substring)
    
all_substrings(shortest)
#find the longest of the substrings
longest_sub = max(substrings, key=len)

in_all =[]
#for sub in subs:
for sub in substrings:
    contains =[]
    for seq in sequences:
        if sub in seq:
#if the substring's in the superstring, append a truthy value to 
            contains.append(1)
        else:
            contains.append(0)
#if the substring's in all the superstrings, append it to the strs list
    if all(contains):
        in_all.append(sub)

#return the longest substring in that list
longest_motif = max(in_all, key=len)
print(longest_motif)
